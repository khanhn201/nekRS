#!/bin/bash
set -e

: ${QUEUE:="batch"}

: ${USE_COMPILER:="amd"} # or gnu
: ${USE_ASCENT:=0}
: ${NEKRS_GPU_MPI:=0}

NEKRS_CACHE_BCAST=1

source $NEKRS_HOME/bin/nrsqsub_utils
setup $# 1

export NVME_HOME="/mnt/bb/$USER/"

gpu_per_node=8
cores_per_numa=7
let nn=$nodes*$gpu_per_node
let ntasks=nn
backend=HIP

chk_case $ntasks


striping_unit=16777216
max_striping_factor=400
set +e; let striping_factor=$nodes/2; set -e
if [ $striping_factor -gt $max_striping_factor ]; then
  striping_factor=$max_striping_factor
fi
if [ $striping_factor -lt 1 ]; then
  striping_factor=1
fi

MPICH_MPIIO_HINTS="*:cray_cb_write_lock_mode=2:cray_cb_nodes_multiplier=4:striping_unit=${striping_unit}:striping_factor=${striping_factor}:romio_cb_write=enable:romio_ds_write=disable:romio_no_indep_rw=true"

USE_COMPILER=`echo $USE_COMPILER | tr '[:upper:]' '[:lower:]'`
function check_frontier_compiler() {
  pe=`echo $PE_ENV | tr '[:upper:]' '[:lower:]'`
  if [ "$pe" != "$USE_COMPILER" ]; then
    echo -e "\nNekRS-WARNING: Attempt to submit job under different PrgEnv than current!"
    echo -e "    PE=$pe  USE_COMPILER=$USE_COMPILER\n"
  fi
}
check_frontier_compiler

# sbatch
SFILE=s.bin
echo "#!/bin/bash" > $SFILE
echo "#SBATCH -A $PROJ_ID" >>$SFILE
echo "#SBATCH -J $jobname" >>$SFILE
echo "#SBATCH -o %x-%j.out" >>$SFILE
echo "#SBATCH -t ${time}:00" >>$SFILE
echo "#SBATCH -N $qnodes" >>$SFILE
echo "#SBATCH -p $QUEUE" >>$SFILE
echo "#SBATCH -C nvme" >>$SFILE
echo "#SBATCH --exclusive" >>$SFILE
echo "#SBATCH --ntasks-per-node=$gpu_per_node" >>$SFILE
echo "#SBATCH --gpus-per-task=1" >>$SFILE
echo "#SBATCH --gpu-bind=closest" >>$SFILE
echo "#SBATCH --cpus-per-task=$cores_per_numa" >>$SFILE

if [ $USE_COMPILER == "amd" ]; then
  echo "module load PrgEnv-amd" >> $SFILE
  echo "module load craype-accel-amd-gfx90a" >> $SFILE
  echo "module load cray-mpich" >> $SFILE
  echo "module load rocm" >> $SFILE
  echo "module load cmake" >> $SFILE
  if [ $USE_ASCENT -eq 1 ]; then
    echo "module load ascent/0.9.3-mpi-omp" >> $SFILE
  fi
  echo "module unload cray-libsci" >> $SFILE

elif [ $USE_COMPILER == "gnu" ]; then
  echo "module load PrgEnv-gnu" >> $SFILE
  echo "module load module load gcc-native/13.2" >> $SFILE
  echo "module load craype-accel-amd-gfx90a" >> $SFILE
  echo "module load cray-mpich/8.1.31" >> $SFILE
  echo "module load rocm" >> $SFILE
  echo "module load cmake" >> $SFILE
  if [ $USE_ASCENT -eq 1 ]; then
    echo "module load ascent/0.9.3-mpi-omp" >> $SFILE
  fi
  echo "module unload cray-libsci" >> $SFILE

else
  echo -e "\nERROR: PrgEnv-"$USE_COMPILER" is not set. Use amd (recommanded) or gnu.\n"
  exit 1
fi

echo "module list" >> $SFILE
echo "rocm-smi" >>$SFILE
echo "rocm-smi --showpids" >>$SFILE

echo "squeue -u \$USER" >>$SFILE

echo "export MPICH_GPU_SUPPORT_ENABLED=1" >>$SFILE

if [ $USE_ASCENT -eq 1 ]; then
  echo "export NEKRS_ASCENT_INSTALL_DIR=\"$OLCF_ASCENT_ROOT/\"" >> $SFILE
  echo "export NEKRS_MPI_THREAD_MULTIPLE=1" >>$SFILE # ascent async mode
fi

## These must be set before compiling so the executable picks up GTL
echo "export PE_MPICH_GTL_DIR_amd_gfx90a=\"-L${CRAY_MPICH_ROOTDIR}/gtl/lib\"" >> $SFILE
echo "export PE_MPICH_GTL_LIBS_amd_gfx90a=\"-lmpi_gtl_hsa\"" >> $SFILE

echo "ulimit -s unlimited " >>$SFILE
echo "export NEKRS_HOME=$NEKRS_HOME" >>$SFILE
echo "export NEKRS_GPU_MPI=$NEKRS_GPU_MPI" >>$SFILE
echo "export OOGS_ENABLE_NBC_DEVICE=1" >>$SFILE

echo "export NVME_HOME=$NVME_HOME" >>$SFILE

echo "export MPICH_MPIIO_HINTS=$MPICH_MPIIO_HINTS" >>$SFILE
echo "export MPICH_MPIIO_STATS=1" >>$SFILE

echo "export MPICH_OFI_NIC_POLICY=NUMA" >>$SFILE
echo "export NEKRS_CACHE_BCAST=$NEKRS_CACHE_BCAST" >> $SFILE

echo "export FI_CXI_RX_MATCH_MODE=hybrid" >> $SFILE  

echo "export PMI_MMAP_SYNC_WAIT_TIME=600" >> $SFILE

echo "if [ \$NEKRS_CACHE_BCAST -eq 1 ]; then" >> $SFILE
echo "  export NEKRS_LOCAL_TMP_DIR=\$NVME_HOME" >> $SFILE
echo "fi" >> $SFILE
echo "" >> $SFILE
echo "date" >>$SFILE
echo "" >> $SFILE

if [ $NEKRS_CACHE_BCAST -eq 1 ]; then
  bin_nvme=$NVME_HOME"nekrs-bin"
  bin_nvme_libs=$bin_nvme"_libs"
  echo "sbcast -fp --send-libs $bin $bin_nvme" >> $SFILE
  echo "if [ ! \"\$?\" == \"0\" ]; then"  >> $SFILE
  echo "    echo \"SBCAST failed!\"" >> $SFILE
  echo "    exit 1" >> $SFILE
  echo "fi" >> $SFILE

  echo "export LD_LIBRARY_PATH=$bin_nvme_libs:${LD_LIBRARY_PATH}" >> $SFILE
  if [ $FP32 -eq 0 ]; then
  echo "export LD_PRELOAD=$bin_nvme_libs/libnekrs.so:$bin_nvme_libs/libocca.so:$bin_nvme_libs/libnekrs-hypre-device.so:$bin_nvme_libs/libnekrs-hypre.so" >> $SFILE
  else
  echo "export LD_PRELOAD=$bin_nvme_libs/libnekrs-fp32.so:$bin_nvme_libs/libocca.so:$bin_nvme_libs/libnekrs-hypre-device.so:$bin_nvme_libs/libnekrs-hypre.so" >> $SFILE
  fi

  # OLCFDEV-1787: sbcast requires extra patch when using GPU-aware MPI
  echo "ln -s $bin_nvme_libs/libhsa-runtime64.so.1 $bin_nvme_libs/libhsa-runtime64.so" >> $SFILE
  echo "ln -s $bin_nvme_libs/libamdhip64.so.5 $bin_nvme_libs/libamdhip64.so" >> $SFILE

  echo "ls -ltra $NVME_HOME" >> $SFILE
  echo "ls -ltra $bin_nvme_libs" >> $SFILE
  echo "bin=$bin_nvme" >> $SFILE
fi
echo "ldd $bin" >> $SFILE

if [ $RUN_ONLY -eq 0 ]; then
  echo -e "\n# precompilation" >>$SFILE
  CMD_build="srun -N 1 -n $gpu_per_node $bin --backend $backend --device-id 0 $extra_args --setup \$case_tmp --build-only \$ntasks_tmp"
  add_build_CMD "$SFILE" "$CMD_build" "$ntasks"
fi


if [ $BUILD_ONLY -eq 0 ]; then
  link_neknek_logfile "$SFILE"
  echo -e "\n# actual run" >>$SFILE
  echo "srun -N $nodes -n $ntasks $bin --backend $backend --device-id 0 $extra_args --setup $case" >>$SFILE
fi
sbatch $SFILE

# clean-up
